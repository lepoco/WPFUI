<Project>

  <PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <PropertyGroup>
    <CommonTags Condition="$(IsCoreProject)">$(CommonTags);.NET</CommonTags>
    <PackageTags Condition="'$(PackageTags)' != ''">$(CommonTags);$(PackageTags)</PackageTags>
    <PackageTags Condition="'$(PackageTags)' == ''">$(CommonTags)</PackageTags>
  </PropertyGroup>

  <PropertyGroup Condition="'$(GeneratePackageOnBuild)' == 'true'">
    <GenerateLibraryLayout>true</GenerateLibraryLayout>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <DeterministicSourcePaths Condition="'$(EnableSourceLink)' == ''">false</DeterministicSourcePaths>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
  </PropertyGroup>

  <ItemGroup Condition="'$(GeneratePackageOnBuild)' == 'true'">
    <None Include="$(BuildToolsDirectory)nuget.png" Pack="true" PackagePath="\Icon.png" Visible="False" />
    <None Include="$(RepositoryDirectory)ThirdPartyNotices.txt" Pack="true" PackagePath="\" Visible="False" />
    <None Include="$(RepositoryDirectory)LICENSE.md" Pack="true" PackagePath="\LICENSE.md" Visible="False" />
    <None Include="$(RepositoryDirectory)README.md" Pack="true" PackagePath="\README.md" Visible="False" />
  </ItemGroup>

  <Target Name="AddCommitHashToAssemblyAttributes" BeforeTargets="GetAssemblyAttributes">
    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute" Condition="'$(SourceRevisionId)' != ''">
        <_Parameter1>CommitHash</_Parameter1>
        <_Parameter2>$(SourceRevisionId)</_Parameter2>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <!-- Configure trimming for projects on .NET 6 and above -->
  <PropertyGroup Condition="'$(TargetFramework)' == 'net6.0' OR '$(TargetFramework)' == 'net8.0'">
    <IsTrimmable>true</IsTrimmable>
    <EnableTrimAnalyzer>true</EnableTrimAnalyzer>
    <EnableAotAnalyzer>true</EnableAotAnalyzer>
    <EnableSingleFileAnalyzer>true</EnableSingleFileAnalyzer>
  </PropertyGroup>

  <!--
    The following target has been ported from TerraFX.Interop.Windows.
    See: https://github.com/terrafx/terrafx.interop.windows.
    Using [module: SkipLocalsInit] suppresses the .init flag for local variables for the entire module.
    This doesn't affect the correctness of methods in this assembly, as none of them are relying on the
    JIT ensuring that all local memory is zeroed out to work. Doing this can provide some minor
    performance benefits, depending on the workload.
  -->
  <PropertyGroup>
    <GeneratedSkipLocalsInitFile Condition="'$(GeneratedSkipLocalsInitFile)' == ''">$(IntermediateOutputPath)$(MSBuildProjectName).SkipLocalsInit.g.cs</GeneratedSkipLocalsInitFile>
    <GeneratedSkipLocalsInitFileLines>
      <![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[module: global::System.Runtime.CompilerServices.SkipLocalsInitAttribute]]]>
    </GeneratedSkipLocalsInitFileLines>
  </PropertyGroup>

  <Target Name="GenerateSkipLocalsInit"
          BeforeTargets="BeforeCompile;CoreCompile"
          DependsOnTargets="PrepareForBuild"
          Condition="'$(Language)' == 'C#'"
          Inputs="$(MSBuildAllProjects)"
          Outputs="$(GeneratedSkipLocalsInitFile)">

    <!-- Write the file with the attribute -->
    <WriteLinesToFile Lines="$(GeneratedSkipLocalsInitFileLines)" Overwrite="true" WriteOnlyWhenDifferent="true" File="$(GeneratedSkipLocalsInitFile)" />

    <!-- Include the generated file in the list of files to compile -->
    <ItemGroup>
      <Compile Include="$(GeneratedSkipLocalsInitFile)" />
    </ItemGroup>
  </Target>

  <Target Name="WpfSourceLinkWorkaround" BeforeTargets="InitializeSourceRootMappedPaths" Condition="'$(UseWPF)' == 'true'">
    <!-- WPF causes an error with SourceLink because its build targets create a temporary project without a PackageReference to SourceLink, see https://github.com/dotnet/sourcelink/issues/91,
         causing the @SourceRoot property to be unexpectedly empty for the MapSourceRoot task
        
         For context, see https://github.com/dotnet/roslyn/blob/main/src/Compilers/Core/MSBuildTask/Microsoft.Managed.Core.targets
         and https://github.com/dotnet/roslyn/blob/main/src/Compilers/Core/MSBuildTask/MapSourceRoots.cs
         
         This workaround sets the SourceRoot manually to some deterministic value to keep the promise given by having DeterministicSourcePaths set to true -->
    <Message Text="using deterministic source path workaround for WPF project instead of SourceLink" />
    <ItemGroup>
      <!-- There needs to be at least one SourceRoot defined, its value does not seem to matter as long as it ends with a directory separator -->
      <SourceRoot Include="\" />
    </ItemGroup>
  </Target>
</Project>